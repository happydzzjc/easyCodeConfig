{
  "author" : "abandon",
  "version" : "1.2.8",
  "userSecure" : "",
  "currTypeMapperGroupName" : "Default",
  "currTemplateGroupName" : "abandon",
  "currColumnConfigGroupName" : "Default",
  "currGlobalConfigGroupName" : "Default",
  "typeMapper" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "matchType" : "REGEX",
        "columnType" : "varchar(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "char(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|medium|long)*text",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "decimal(\\(\\d+,\\d+\\))?",
        "javaType" : "java.lang.Double"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "integer",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|small|medium)*int(\\(\\d+\\))?",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int4",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int8",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "REGEX",
        "columnType" : "bigint(\\(\\d+\\))?",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "date",
        "javaType" : "java.time.LocalDateTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "datetime",
        "javaType" : "java.time.LocalDateTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "timestamp",
        "javaType" : "java.time.LocalDateTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "time",
        "javaType" : "java.time.LocalTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "boolean",
        "javaType" : "java.lang.Boolean"
      }, {
        "matchType" : "REGEX",
        "columnType" : "double(\\(\\d+,\\d+\\))?",
        "javaType" : "java.lang.Double"
      } ]
    }
  },
  "template" : {
    "abandon" : {
      "name" : "abandon",
      "elementList" : [ {
        "name" : "controller.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n##导入全局变量\n$!{init.vm}\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\n\nimport com.github.pagehelper.PageInfo;\nimport $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}DTO;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport com.jkcgy.starter.common.constant.ResultResponse;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.annotation.Resource;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表控制层\n *\n * @author $author\n * @version 1.0\n * @since $!time.currTime()\n */\n@Slf4j\n@AllArgsConstructor\n@Api(tags = \"$!{tableInfo.comment}\")\n@RequestMapping(\"v1/$!tool.firstLowerCase($tableInfo.name)\")\n@RestController\npublic class $!{tableName} {\n    \n    @Resource\n    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n\n    /**\n     * 分页查询\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)}DTO 参数\n     * @return 实例对象集合\n     */\n    @ApiOperation(\"列表\")\n    @GetMapping(\"/page\")\n    public ResultResponse<PageInfo<$!{tableInfo.name}>> page(@RequestBody $!{tableInfo.name}DTO $!{tool.firstLowerCase($tableInfo.name)}DTO) {\n        try {\n            log.info(\"分页查询：$!{tool.firstLowerCase($tableInfo.name)}DTO = {}\", $!{tool.firstLowerCase($tableInfo.name)}DTO);\n            return ResultResponse.succResult($!{tool.firstLowerCase($tableInfo.name)}Service.listPage($!{tool.firstLowerCase($tableInfo.name)}DTO));\n        } catch (Exception e) {\n            log.error(\"分页查询异常：{}\", e.getMessage(), e);\n            return ResultResponse.errorResult(\"操作失败，请稍后再试！\");\n        }\n    }\n    \n    /**\n     * 通过主键查询单条数据\n     *\n     * @param id 主键\n     * @return 单条数据\n     */\n    @ApiOperation(\"查询\")\n    @GetMapping(\"/selectById\")\n    public ResultResponse<$!{tableInfo.name}> selectById(@RequestParam(name = \"id\") $!pk.shortType id) {\n        try {\n            log.info(\"通过主键查询单条数据：id = {}\", id);\n            return ResultResponse.succResult($!{tool.firstLowerCase($tableInfo.name)}Service.getById(id));\n        } catch (Exception e) {\n            log.error(\"通过主键查询单条数据异常：{}\", e.getMessage(), e);\n            return ResultResponse.errorResult(\"操作失败，请稍后再试！\");\n        }\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 实体\n     * @return 新增结果\n     */\n    @ApiOperation(\"新增\")\n    @PostMapping(\"add\")\n    public ResultResponse<$!{tableInfo.name}> add(@RequestBody $!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        try {\n            log.info(\"新增数据：$!{tool.firstLowerCase($tableInfo.name)} = {}\", $!{tool.firstLowerCase($tableInfo.name)});\n            return ResultResponse.succResult($!{tool.firstLowerCase($tableInfo.name)}Service.add($!{tool.firstLowerCase($tableInfo.name)}));\n        } catch (Exception e) {\n            log.error(\"新增数据异常：{}\", e.getMessage(), e);\n            return ResultResponse.errorResult(\"操作失败，请稍后再试！\");\n        }\n    }\n\n    /**\n     * 编辑数据\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} 实体\n     * @return 编辑结果\n     */\n    @ApiOperation(\"编辑\")\n    @PutMapping(\"update\")\n    public ResultResponse<$!{tableInfo.name}> update(@RequestBody $!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        try {\n            log.info(\"编辑数据：$!{tool.firstLowerCase($tableInfo.name)} = {}\", $!{tool.firstLowerCase($tableInfo.name)});\n            return ResultResponse.succResult($!{tool.firstLowerCase($tableInfo.name)}Service.update($!{tool.firstLowerCase($tableInfo.name)}));\n        } catch (Exception e) {\n            log.error(\"编辑数据异常：{}\", e.getMessage(), e);\n            return ResultResponse.errorResult(\"操作失败，请稍后再试！\");\n        }\n    }\n\n    /**\n     * 删除数据\n     *\n     * @param id 主键\n     * @return 删除是否成功\n     */\n    @ApiOperation(\"删除\")\n    @DeleteMapping(\"deleteById\")\n    public ResultResponse<Boolean> deleteById(@RequestParam(name = \"id\") $!pk.shortType id) {\n        try {\n            log.info(\"删除数据：id = {}\", id);\n            return ResultResponse.succResult($!{tool.firstLowerCase($tableInfo.name)}Service.deleteById(id));\n        } catch (Exception e) {\n            log.error(\"删除数据异常：{}\", e.getMessage(), e);\n            return ResultResponse.errorResult(\"操作失败，请稍后再试！\");\n        }\n    }\n}"
      }, {
        "name" : "entity.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n##导入全局变量\n$!{init.vm}\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/entity\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}entity;\n\n##自动导入包（全局变量）\n$!autoImport\nimport com.baomidou.mybatisplus.annotation.*;\nimport com.baomidou.mybatisplus.extension.activerecord.Model;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.*;\n \nimport java.io.Serializable;\nimport java.time.LocalDateTime;\n \n##表注释（宏定义）\n##tableComment(\"表实体类\")\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表实体类\n * \n * @author $author\n * @since $!time.currTime()\n */\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@EqualsAndHashCode(callSuper = true)\n@ApiModel(description = \"$!{tableInfo.comment}\")\n@TableName(value =\"$!{tableInfo.obj.name}\")\n@SuppressWarnings(\"all\")\npublic class $!{tableName} extends Model<$!{tableInfo.name}> implements Serializable {\n    \n    @TableField(exist = false)\n    private static final long serialVersionUID = $!tool.serial();\n #foreach($column in $tableInfo.fullColumn)\n    \n    #if(${column.comment})/**\n    * ${column.comment}\n    */#end\n    #if(${column.obj.name} == \"id\")\n    @TableId(value = \"id\", type = IdType.ASSIGN_UUID) \n    #elseif(${column.obj.name} == \"create_time\")\n    @TableField(value = \"create_time\", fill = FieldFill.INSERT)\n    #elseif(${column.obj.name} == \"update_time\")\n    @TableField(value = \"update_time\", fill = FieldFill.INSERT_UPDATE)\n    #else\n    @TableField(value = \"${column.obj.name}\")\n    #end\n    @ApiModelProperty(\"${column.comment}\")\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n}"
      }, {
        "name" : "service.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n##导入全局变量\n$!{init.vm}\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport com.github.pagehelper.PageInfo;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}DTO;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务接口\n *\n * @author $author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} extends IService<$!{tableInfo.name}> {\n\n    /**\n     * 分页查询\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name})DTO 查询参数\n     * @return 实例对象集合\n     */\n    PageInfo<$!{tableInfo.name}> listPage($!{tableInfo.name}DTO $!tool.firstLowerCase($!{tableInfo.name})DTO);\n    \n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    $!{tableInfo.name} getById($!pk.shortType $!pk.name);\n\n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    $!{tableInfo.name} add($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 是否成功\n     */\n    boolean deleteById($!pk.shortType $!pk.name);\n\n}"
      }, {
        "name" : "impl.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n##导入全局变量\n$!{init.vm}\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"ServiceImpl\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service/impl\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n##设置远程调用 group 值为当前选中的module加上“-service”\n#set($moduleName = $modulePath)\n#set($moduleNameLength = $modulePath.length())\n#set($moduleNameIndex = ${moduleName.lastIndexOf(\"/\")} + 1)\n#set($groupName = $moduleName.substring($moduleNameIndex, $moduleNameLength) + \"-service\")\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;\n\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.github.pagehelper.PageHelper;\nimport com.github.pagehelper.PageInfo;\nimport $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}DTO;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport lombok.extern.slf4j.Slf4j;\n#if($generateDubboServiceAnnotation)import org.apache.dubbo.config.annotation.DubboService;#{end}\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.annotation.Resource;\nimport java.util.List;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类\n *\n * @author $author\n * @since $!time.currTime()\n */\n@Slf4j\n@Service(\"$!tool.firstLowerCase($!{tableInfo.name})Service\")\n#if($generateDubboServiceAnnotation)@DubboService(group = \"$!{groupName}\")#{end}\n@Transactional\npublic class $!{tableName} extends ServiceImpl<$!{tableInfo.name}Mapper, $!{tableInfo.name}> implements $!{tableInfo.name}Service {\n    \n    @Resource\n    private $!{tableInfo.name}Mapper $!tool.firstLowerCase($!{tableInfo.name})Mapper;\n\n    /**\n     * 分页查询\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name})DTO 查询参数\n     * @return 实例对象集合\n     */\n    @Override\n    public PageInfo<$!{tableInfo.name}> listPage($!{tableInfo.name}DTO $!{tool.firstLowerCase($!{tableInfo.name})}DTO) {\n        PageHelper.startPage($!{tool.firstLowerCase($!{tableInfo.name})}DTO.getCurrent(), $!{tool.firstLowerCase($!{tableInfo.name})}DTO.getPageSize());\n        List<$!{tableInfo.name}> $!tool.firstLowerCase($!{tableInfo.name})List = $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.listPage($!tool.firstLowerCase($!{tableInfo.name})DTO);\n        return new PageInfo<>($!tool.firstLowerCase($!{tableInfo.name})List);\n    }\n    \n    /**\n     * 通过ID查询单条数据\n     *\n     * @param $!pk.name 主键\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} getById($!pk.shortType $!pk.name) {\n        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.selectById($!pk.name);\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} add($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.insert($!tool.firstLowerCase($!{tableInfo.name}));\n        return $!tool.firstLowerCase($!{tableInfo.name});\n    }\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.updateById($!tool.firstLowerCase($!{tableInfo.name}));\n        return this.getById($!{tool.firstLowerCase($!{tableInfo.name})}.get$!tool.firstUpperCase($pk.name)());\n    }\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param $!pk.name 主键\n     * @return 是否成功\n     */\n    @Override\n    public boolean deleteById($!pk.shortType $!pk.name) {\n        return $!{tool.firstLowerCase($!{tableInfo.name})}Mapper.deleteById($!pk.name) > 0;\n    }\n}"
      }, {
        "name" : "mapper.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n##导入全局变量\n$!{init.vm}\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Mapper\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;\n \nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Mapper;\nimport java.util.List;\nimport $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}DTO;\n \n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层\n *\n * @author $author\n * @since $!time.currTime()\n */\n@Mapper\npublic interface $!{tableName} extends BaseMapper<$!{tableInfo.name}>{\n \n    /**\n     * 分页查询\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name})DTO 查询参数\n     * @return 实例对象集合\n     */\n    List<$!{tableInfo.name}> listPage($!{tableInfo.name}DTO $!tool.firstLowerCase($!{tableInfo.name})DTO);\n \n}"
      }, {
        "name" : "xml.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n##导入全局变量\n$!{init.vm}\n##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Mapper.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper\">\n\n    <sql id=\"Base_Column_List\">\n#foreach($column in $tableInfo.fullColumn)\n#if($velocityCount % 4 == 1 && $velocityCount != 1)\n\n#end#if($velocityCount % 4 == 1)        #end$column.obj.name#if($velocityHasNext), #end\n#end\n\n    </sql>\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n    \n    <!--  列表查询  -->\n    <select id=\"listPage\" parameterType=\"$!{tableInfo.savePackageName}.dto.$!{tableInfo.name}DTO\"\n            resultType=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\">\n        SELECT\n            #allSqlColumn()\n        FROM\n            $tableInfo.obj.name\n    </select>\n    \n</mapper>"
      }, {
        "name" : "dto.vm",
        "code" : "##导入宏定义\n$!{define.vm}\n##导入全局变量\n$!{init.vm}\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"DTO\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/dto\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dto;\n\n##自动导入包（全局变量）\nimport com.jkcgy.starter.common.base.BaseQry;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.*;\n\nimport java.io.Serializable;\nimport java.time.LocalDateTime;\n##自动导入包（全局变量）\n$!autoImport\n##表注释（宏定义）\n##tableComment(\"表实体类\")\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表数据传输对象\n * \n * @author $author\n * @since $!time.currTime()\n */\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@EqualsAndHashCode(callSuper = true)\npublic class $!{tableName} extends BaseQry implements Serializable {\n    \n    private static final long serialVersionUID = $!tool.serial();\n    \n    #foreach($column in $tableInfo.fullColumn)\n        #if(${column.comment})/**\n        * ${column.comment}\n        */#end\n        @ApiModelProperty(\"$column.comment\")\n        private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n        \n    #end\n}"
      } ]
    }
  },
  "columnConfig" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "title" : "disable",
        "type" : "BOOLEAN",
        "selectValue" : ""
      }, {
        "title" : "support",
        "type" : "SELECT",
        "selectValue" : "add,edit,query,del,ui"
      } ]
    }
  },
  "globalConfig" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "name" : "autoImport.vm",
        "value" : "##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"
      }, {
        "name" : "define.vm",
        "value" : "##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"
      }, {
        "name" : "init.vm",
        "value" : "##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"book_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)\n\n##是否生成@DubboService注解\n#set($generateDubboServiceAnnotation = true)"
      }, {
        "name" : "mybatisSupport.vm",
        "value" : "##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end\n"
      } ]
    }
  }
}
